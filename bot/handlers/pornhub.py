import asyncio
import logging
import tempfile
import shutil
from aiogram import types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
import yt_dlp
import youtube_dl
import os

from bot.core.states import PHStates
from bot.core.config import SLEEP_BETWEEN_CHUNKS
from bot.utils.helpers import cleanup_files, download_with_retry, send_with_retry
from bot.utils.processing import get_video_duration, split_video_chunks, compress_video_if_needed


async def cmd_ph_download(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Pornhub –≤–∏–¥–µ–æ. –Ø —Å–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≥–æ—Ç–æ–≤—ã–µ MP4-—á–∞–Ω–∫–∏. üî•")
    await state.set_state(PHStates.waiting_for_link)


async def process_ph_link(message: types.Message, state: FSMContext):
    bot = message.bot
    await message.answer("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É, —Å–∫–∞—á–∏–≤–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é... üì•")
    link = message.text
    chat_id = message.chat.id
    temp_dir = tempfile.mkdtemp()
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: outtmpl –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å temp_dir
    video_path_template = os.path.join(temp_dir, "%(title)s.%(ext)s")
    video_path = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    success = False
    method_used = ""

    try:
        # –ú–µ—Ç–æ–¥ 1: yt-dlp —Å retry
        ydl_opts = {
            'format': 'best[height<=720][ext=mp4]',
            'outtmpl': video_path_template,
            'noplaylist': True,
        }
        downloaded_path = await download_with_retry(yt_dlp, ydl_opts, link)
        if downloaded_path:
            video_path = downloaded_path
            success = True
            method_used = "yt-dlp"
        else:
            # –ú–µ—Ç–æ–¥ 2: youtube-dl —Å retry (fallback)
            ydl_opts['outtmpl'] = video_path_template  # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã template –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            downloaded_path = await download_with_retry(youtube_dl, ydl_opts, link)
            if downloaded_path:
                video_path = downloaded_path
                success = True
                method_used = "youtube-dl"

        if not success or not video_path:
            await bot.send_message(chat_id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É. ‚ùå")
            return

        await bot.send_message(chat_id, f"–°–∫–∞—á–∞–Ω–æ —Å {method_used}! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... ‚úÖ")

        duration = await get_video_duration(video_path)
        file_size = os.path.getsize(video_path)
        await bot.send_message(chat_id, f"–í–∏–¥–µ–æ: {duration:.1f} —Å–µ–∫, {file_size // 1024 // 1024} –ú–ë.")

        with tempfile.TemporaryDirectory() as chunk_dir:
            chunks = await split_video_chunks(video_path, chunk_dir)
            if not chunks:
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ–∑–∫–µ. üòî")
                return

            num_chunks = len(chunks)
            if num_chunks > 1:
                await bot.send_message(chat_id,
                                       f"–î–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ! –†–∞–∑–¥–µ–ª–∏–ª –Ω–∞ {num_chunks} —á–∞–Ω–∫–æ–≤ –ø–æ 60 —Å–µ–∫. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –æ–¥–Ω–æ–º—É... ‚úÇÔ∏è")

            for i, chunk_path in enumerate(chunks, 1):
                if num_chunks > 1:
                    await bot.send_message(chat_id, f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —á–∞–Ω–∫ {i}/{num_chunks}...")

                processed_path = f"{chunk_path}_processed.mp4"
                if not await compress_video_if_needed(chunk_path, processed_path):
                    await bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å —á–∞–Ω–∫ {i}. –ü—Ä–æ–ø—É—Å–∫–∞—é. üòî")
                    continue

                chunk_duration = await get_video_duration(processed_path)
                caption = f"–ß–∞–Ω–∫ {i}/{num_chunks} –∏–∑ Pornhub ({method_used}) | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {chunk_duration:.1f} —Å–µ–∫"
                await send_with_retry(
                    bot.send_video,
                    chat_id,
                    video=types.FSInputFile(processed_path),
                    caption=caption,
                    supports_streaming=True
                )
                await asyncio.sleep(SLEEP_BETWEEN_CHUNKS)
                await cleanup_files(processed_path)  # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

            await bot.send_message(chat_id, "–í—Å–µ —á–∞–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ì–æ—Ç–æ–≤–æ. üéâ")

    except Exception as e:
        logging.error(f"Error processing PH link: {e}")
        await bot.send_message(chat_id, "–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ. ‚ùå")
    finally:
        # cleanup_files(video_path) —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tempfile
        shutil.rmtree(temp_dir, ignore_errors=True)
        await state.clear()


def register_ph_handlers(dp):
    dp.message.register(cmd_ph_download, Command("ph_v_d"))
    dp.message.register(process_ph_link, PHStates.waiting_for_link)