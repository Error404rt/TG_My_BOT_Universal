import asyncio
import logging
import tempfile
import os
import shlex

from aiogram import types, F
from bot.core.config import SLEEP_BETWEEN_CHUNKS, MAX_DURATION_SECONDS
from bot.utils.helpers import cleanup_files, validate_video_file
from bot.utils.processing import get_video_duration, split_video_chunks, process_video_to_circle


async def handle_video_message(message: types.Message, bot):
    await message.answer("–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é... üîÑ")
    video_file = message.video
    file_id = video_file.file_id
    chat_id = message.chat.id
    download_path = f"./downloads/{file_id}.mp4"

    try:
        # –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ TG
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, destination=download_path)

        if not await validate_video_file(download_path):
            await bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ. üò¢")
            return

        duration = await get_video_duration(download_path)
        await message.answer(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {duration:.2f} —Å–µ–∫. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        with tempfile.TemporaryDirectory() as chunk_dir:
            chunks = await split_video_chunks(download_path, chunk_dir)
            if not chunks:
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. üò¢")
                return

            num_chunks = len(chunks)
            if num_chunks > 1:
                await message.answer(
                    f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration:.2f} —Å–µ–∫). –ù–∞—Ä–µ–∑–∞—é –Ω–∞ {num_chunks} –∫—Ä—É–∂–∫–æ–≤... ‚úÇÔ∏è")

            for i, chunk_path in enumerate(chunks, 1):
                if num_chunks > 1:
                    await bot.send_message(chat_id, f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ {i}/{num_chunks}...")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –¥–æ 60—Å, –µ—Å–ª–∏ split_video_chunks –Ω–µ –æ–±—Ä–µ–∑–∞–ª –∏–¥–µ–∞–ª—å–Ω–æ
                chunk_duration = await get_video_duration(chunk_path)
                if chunk_duration > MAX_DURATION_SECONDS + 1:  # +1 –¥–ª—è –¥–æ–ø—É—Å–∫–∞
                    trimmed_path = f"{chunk_path}.trimmed.mp4"
                    cmd_trim = f"ffmpeg -i {shlex.quote(chunk_path)} -t {MAX_DURATION_SECONDS} -c copy {shlex.quote(trimmed_path)}"
                    await run_ffmpeg_command(cmd_trim)
                    chunk_path = trimmed_path

                await process_video_to_circle(chunk_path, chat_id, bot)
                await asyncio.sleep(SLEEP_BETWEEN_CHUNKS)

        await bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∏ –∫—Ä—É–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. ‚ú®")

    except Exception as e:
        logging.error(f"Error in handle_video_message: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üò≠")
    finally:
        await cleanup_files(download_path, delay=1)


def register_video_circle_handlers(dp, bot):
    dp.message.register(handle_video_message, F.video)