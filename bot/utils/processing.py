import asyncio
import logging
import os
import shutil
import shlex

from bot.core.config import MAX_DURATION_SECONDS, MAX_VIDEO_SIZE_BYTES, MAX_FILE_SIZE_BYTES, CIRCLE_SIZE
from bot.utils.helpers import validate_video_file


async def check_ffmpeg_installed() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ FFmpeg/FFprobe –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤ PATH."""
    try:
        command = "ffmpeg -version"
        process = await asyncio.create_subprocess_shell(
            command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        await process.communicate()

        returncode = process.returncode

        if returncode == 0:
            logging.info("FFmpeg/FFprobe —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return True
        else:
            logging.error(f"FFmpeg/FFprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {returncode}")
            return False

    except FileNotFoundError:
        logging.error("FFmpeg/FFprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ PATH.")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FFmpeg: {e}")
        return False


async def run_ffmpeg_command(command: str) -> tuple[bytes, bytes, int]:
    """Runs an FFmpeg command and returns stdout, stderr, and return code."""
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    return stdout, stderr, process.returncode


async def get_video_duration(video_path: str) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffprobe."""
    duration_cmd = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {shlex.quote(video_path)}"
    stdout, stderr, returncode = await run_ffmpeg_command(duration_cmd)
    if returncode != 0:
        logging.error(f"ffprobe error: {stderr.decode()}")
        return 0
    try:
        return float(stdout.decode().strip())
    except ValueError:
        return 0


async def get_audio_duration(audio_path: str) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffprobe."""
    duration_cmd = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {shlex.quote(audio_path)}"
    stdout, stderr, returncode = await run_ffmpeg_command(duration_cmd)
    if returncode != 0:
        logging.error(f"ffprobe error: {stderr.decode()}")
        return 0
    try:
        return float(stdout.decode().strip())
    except ValueError:
        return 0


async def split_video_chunks(input_path: str, chunk_dir: str, max_duration=MAX_DURATION_SECONDS) -> list[str]:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ max_duration —Å–µ–∫—É–Ω–¥ —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    duration = await get_video_duration(input_path)
    if duration <= max_duration:
        output_path = os.path.join(chunk_dir, 'chunk_001.mp4')
        shutil.copy2(input_path, output_path)
        if await validate_video_file(output_path):
            return [output_path]
        return []

    os.makedirs(chunk_dir, exist_ok=True)
    cmd = f"ffmpeg -i {shlex.quote(input_path)} -c copy -map 0 -segment_time {max_duration} -f segment -reset_timestamps 1 {shlex.quote(chunk_dir)}/chunk_%03d.mp4"
    _, stderr, returncode = await run_ffmpeg_command(cmd)
    if returncode != 0:
        logging.error(f"ffmpeg split error: {stderr.decode()}")
        return []

    valid_chunks = []
    chunks = sorted([f for f in os.listdir(chunk_dir) if f.endswith('.mp4')])
    for chunk in chunks:
        chunk_path = os.path.join(chunk_dir, chunk)
        if await validate_video_file(chunk_path):
            valid_chunks.append(chunk_path)
        else:
            # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. –æ—á–∏—â–∞–µ—Ç—Å—è –≤–µ—Å—å chunk_dir
            pass
    return valid_chunks


async def compress_video_if_needed(input_path: str, output_path: str, max_size=MAX_VIDEO_SIZE_BYTES):
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ max_size, —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    file_size = os.path.getsize(input_path)
    if file_size <= max_size:
        shutil.copy2(input_path, output_path)
        return await validate_video_file(output_path)

    # –°–∂–∞—Ç–∏–µ —Å –ø–µ—Ä–≤—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º
    cmd = (
        f"ffmpeg -i {shlex.quote(input_path)} "
        f"-vf scale=-2:720 "
        f"-c:v libx264 -crf 28 -c:a aac -b:a 128k "
        f"{shlex.quote(output_path)}"
    )
    _, stderr, returncode = await run_ffmpeg_command(cmd)
    if returncode != 0:
        logging.error(f"ffmpeg compress error: {stderr.decode()}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
    new_size = os.path.getsize(output_path)
    if new_size > max_size:
        cmd2 = (
            f"ffmpeg -i {shlex.quote(output_path)} "
            f"-vf scale=-2:480 "
            f"-c:v libx264 -crf 32 -c:a aac -b:a 64k "
            f"{shlex.quote(output_path)}.temp.mp4"
        )
        await run_ffmpeg_command(cmd2)
        os.replace(f"{output_path}.temp.mp4", output_path)
        new_size = os.path.getsize(output_path)
        if new_size > max_size:
            logging.warning(f"Video still too large: {new_size} bytes")
            return False

    return await validate_video_file(output_path)


async def process_video_to_circle(input_path: str, chat_id: int, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ-—á–∞–Ω–∫ –≤ –∫—Ä—É–∂–æ–∫ —Å –ø–æ–º–æ—â—å—é FFmpeg, —Å–∂–∏–º–∞–µ—Ç –¥–æ <12 –ú–ë, —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    from aiogram import types  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from bot.utils.helpers import cleanup_files, send_with_retry  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    output_path = f"{input_path}_circle.mp4"
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: crop –≤ –∫–≤–∞–¥—Ä–∞—Ç, scale, pad, compress
        cmd_crop = (
            f"ffmpeg -i {shlex.quote(input_path)} "
            f"-vf 'crop=min(iw\\,ih):min(iw\\,ih),scale={CIRCLE_SIZE}:{CIRCLE_SIZE}:force_original_aspect_ratio=decrease,pad={CIRCLE_SIZE}:{CIRCLE_SIZE}:(ow-iw)/2:(oh-ih)/2:black,setsar=1' "
            f"-c:v libx264 -crf 28 -c:a aac -b:a 64k -t {MAX_DURATION_SECONDS} "
            f"-pix_fmt yuv420p -movflags +faststart {shlex.quote(output_path)}"
        )
        _, stderr, returncode = await run_ffmpeg_command(cmd_crop)
        if returncode != 0:
            logging.error(f"ffmpeg crop error: {stderr.decode()}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–∂–∫–∞. üò≠")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∂–∞—Ç–∏–µ
        final_size = os.path.getsize(output_path)
        if final_size > MAX_FILE_SIZE_BYTES:
            logging.warning(f"File too large: {final_size} bytes. Compressing further.")
            temp_path = f"{output_path}.temp.mp4"
            cmd_compress = (
                f"ffmpeg -i {shlex.quote(output_path)} "
                f"-vf scale=480:480 "
                f"-c:v libx264 -crf 32 -c:a aac -b:a 48k "
                f"{shlex.quote(temp_path)}"
            )
            _, stderr, returncode = await run_ffmpeg_command(cmd_compress)
            if returncode != 0:
                logging.error(f"ffmpeg compress error: {stderr.decode()}")
                await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ –≤–∏–¥–µ–æ. üòî")
                return
            os.replace(temp_path, output_path)
            final_size = os.path.getsize(output_path)
            if final_size > MAX_FILE_SIZE_BYTES:
                await bot.send_message(chat_id, f"–í–∏–¥–µ–æ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({final_size // 1024 // 1024} –ú–ë). üòî")
                return

        if not await validate_video_file(output_path):
            await bot.send_message(chat_id, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫—Ä—É–∂–æ–∫ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. üòî")
            return

        duration = await get_video_duration(output_path)

        await send_with_retry(
            bot.send_video_note,
            chat_id=chat_id,
            video_note=types.FSInputFile(output_path),
            duration=int(duration),
            length=CIRCLE_SIZE
        )

    except Exception as e:
        logging.error(f"Error processing video to circle: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–∂–∫–∞. üò≠")
    finally:
        await cleanup_files(output_path, delay=1)